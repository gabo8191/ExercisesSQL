/*1. Plantee un programa PL/SQL que solicite al usuario un id de empleado y se
 retorne si el empleado existe o no.*/
/*%TYPE ES UNA CARACTERÍSTICA EN PL/SQL QUE SE UTILIZA PARA DECLARAR UNA VARIABLE
 O UN PARÁMETRO DE PROCEDIMIENTO CON EL MISMO TIPO DE DATOS QUE UNA COLUMNA DE UNA TABLA,
 UNA VARIABLE O UN PARÁMETRO PREVIAMENTE DECLARADO.*/
DECLARE V_EMPLOYEE_ID HR.EMPLOYEES.EMPLOYEE_ID % TYPE := 101;

V_NOMBRE HR.EMPLOYEES.FIRST_NAME % TYPE;

V_APELLIDO HR.EMPLOYEES.LAST_NAME % TYPE;

V_EXISTE VARCHAR2(100) := '';

-- DECLARACIÓN E INICIALIZACIÓN DE V_EXISTE
BEGIN
SELECT
    FIRST_NAME,
    LAST_NAME INTO V_NOMBRE,
    V_APELLIDO
FROM
    HR.EMPLOYEES
WHERE
    EMPLOYEE_ID = V_EMPLOYEE_ID;

IF V_NOMBRE IS NOT NULL
AND V_APELLIDO IS NOT NULL THEN DBMS_OUTPUT.PUT_LINE(
    'EL ID ' || V_EMPLOYEE_ID || ' CORRESPONDE A: ' || V_NOMBRE || ' ' || V_APELLIDO
);

END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN V_EXISTE := ' NO EXISTE EN LA BASE DE DATOS';

DBMS_OUTPUT.PUT_LINE(
    'EL EMPLEADO CON ID ' || V_EMPLOYEE_ID || V_EXISTE
);

END;

/*2. Elabore un programa PL/SQL que muestre los empleados de un región
 ingresada por el usuario y que fueron contratados en el mismo mes de su jefe. El
 reporte debe mostrar lo siguiente:
 - Nombre completo (Nombre y Apellido)
 - Nombre del trabajo
 - Antigüedad (en meses)
 - Valor del primer pago (Si el empleado fue contratado antes del 15 se le
 pago el 80% del sueldo, de lo contrario solo se le pago el 40%).*/
DECLARE V_REGION_NAME VARCHAR2(100) := 'Americas';

CURSOR C_EMPLOYEES IS
SELECT
    EDV.FIRST_NAME || ' ' || EDV.LAST_NAME AS NOMBRE,
    EDV.JOB_TITLE AS TRABAJO,
    TRUNC(MONTHS_BETWEEN(SYSDATE, E.HIRE_DATE)) AS ANTIGUEDAD_MESES,
    CASE
        WHEN EXTRACT(
            DAY
            FROM
                E.HIRE_DATE
        ) <= 15 THEN EDV.SALARY * 0.8
        ELSE EDV.SALARY * 0.4
    END AS SALARIO
FROM
    HR.EMP_DETAILS_VIEW EDV
    JOIN HR.EMPLOYEES E ON EDV.EMPLOYEE_ID = E.EMPLOYEE_ID
    LEFT JOIN HR.EMPLOYEES JE ON EDV.MANAGER_ID = JE.EMPLOYEE_ID
WHERE
    EDV.REGION_NAME = V_REGION_NAME
    AND EXTRACT(
        MONTH
        FROM
            E.HIRE_DATE
    ) = EXTRACT(
        MONTH
        FROM
            JE.HIRE_DATE
    );

BEGIN FOR I IN C_EMPLOYEES LOOP DBMS_OUTPUT.PUT_LINE('Nombre completo: ' || I.NOMBRE);

DBMS_OUTPUT.PUT_LINE('Trabajo: ' || I.TRABAJO);

DBMS_OUTPUT.PUT_LINE('Meses trabajados: ' || I.ANTIGUEDAD_MESES);

DBMS_OUTPUT.PUT_LINE('Primer pago: ' || I.SALARIO);

DBMS_OUTPUT.PUT_LINE('____________');

END LOOP;

END;

/* 3. Elabore un programa PL/SQL almacenado que solicite al usuario dos
 nombres de regiones y retorne la cantidad de jefes de empleados que hay en dichas
 regiones.*/
DECLARE V_REGION_1 HR.EMP_DETAILS_VIEW.REGION_NAME % TYPE;

V_REGION_2 HR.EMP_DETAILS_VIEW.REGION_NAME % TYPE;

V_COUNT_1 NUMBER;

V_COUNT_2 NUMBER;

BEGIN V_REGION_1 := UPPER('EUROPE');

V_REGION_2 := UPPER('AMERICAS');

-- CONTAR LA CANTIDAD DE JEFES EN LA PRIMERA REGIÓN.
SELECT
    COUNT(MANAGER_ID) INTO V_COUNT_1
FROM
    HR.EMP_DETAILS_VIEW
WHERE
    UPPER(REGION_NAME) = V_REGION_1;

-- CONTAR LA CANTIDAD DE JEFES EN LA SEGUNDA REGIÓN.
SELECT
    COUNT(MANAGER_ID) INTO V_COUNT_2
FROM
    HR.EMP_DETAILS_VIEW
WHERE
    UPPER(REGION_NAME) = V_REGION_2;

-- MOSTRAR LOS RESULTADOS.
DBMS_OUTPUT.NEW_LINE;

DBMS_OUTPUT.PUT_LINE(
    'CANTIDAD DE JEFES EN LA REGIÓN ' || V_REGION_1 || ': ' || V_COUNT_1
);

DBMS_OUTPUT.PUT_LINE(
    'CANTIDAD DE JEFES EN LA REGIÓN ' || V_REGION_2 || ': ' || V_COUNT_2
);

EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE(
    'NO SE ENCONTRARON DATOS PARA LA REGIÓN ' || V_REGION_1 || ' O ' || V_REGION_2
);

END;

/* 4. Haga un programa PL/SQL que solicite un EMPLOYEE_ID y con base en
 esto imprima si el salario del empleado en mención, está por debajo, igual o por
 encima del promedio de los salarios de la región a la que pertenece el empleado. No
 haga uso de CASE.*/
DECLARE V_EMPLOYEE_ID HR.EMP_DETAILS_VIEW.EMPLOYEE_ID % TYPE := 145;

V_EMPLOYEE_SALARY HR.EMP_DETAILS_VIEW.SALARY % TYPE;

V_REGION_AVG_SALARY NUMBER;

V_REGION_NAME HR.EMP_DETAILS_VIEW.REGION_NAME % TYPE;

BEGIN
SELECT
    SALARY,
    REGION_NAME INTO V_EMPLOYEE_SALARY,
    V_REGION_NAME
FROM
    HR.EMP_DETAILS_VIEW
WHERE
    EMPLOYEE_ID = V_EMPLOYEE_ID;

SELECT
    ROUND(AVG(SALARY + SALARY * NVL(COMMISSION_PCT, 0)), 2) INTO V_REGION_AVG_SALARY
FROM
    HR.EMP_DETAILS_VIEW
WHERE
    REGION_NAME = V_REGION_NAME;

IF V_EMPLOYEE_SALARY < V_REGION_AVG_SALARY THEN DBMS_OUTPUT.PUT_LINE(
    'EL SALARIO DEL EMPLEADO ESTÁ POR DEBAJO DEL PROMEDIO DE LA REGIÓN.'
);

ELSIF V_EMPLOYEE_SALARY = V_REGION_AVG_SALARY THEN DBMS_OUTPUT.PUT_LINE(
    'EL SALARIO DEL EMPLEADO ES IGUAL AL PROMEDIO DE LA REGIÓN.'
);

ELSE DBMS_OUTPUT.PUT_LINE(
    'EL SALARIO DEL EMPLEADO ESTÁ POR ENCIMA DEL PROMEDIO DE LA REGIÓN.'
);

END IF;

DBMS_OUTPUT.PUT_LINE('SALARIO: $' || V_EMPLOYEE_SALARY);

DBMS_OUTPUT.PUT_LINE('PROMEDIO: $' || V_REGION_AVG_SALARY);

END;

/* 5. Cree un bloque anónimo para con base en un código de empleado
 ingresado elusuario, se pueda conocer:
 - El número de trabajos que el empleado ha tenido,
 - El número de departamentos en los que el empleado ha trabajado.
 Se debe imprimir en pantalla un mensaje como el siguiente:
 “El empleado Pedro Pérez ha cambiado 5 veces de trabajo y 2 veces de
 departamento” */
DECLARE V_EMPLOYEE_ID HR.EMPLOYEES.EMPLOYEE_ID % TYPE := 102;

V_NOMBRE HR.EMPLOYEES.FIRST_NAME % TYPE;

V_APELLIDO HR.EMPLOYEES.LAST_NAME % TYPE;

V_TRABAJOS NUMBER;

V_DEPARTAMENTOS NUMBER;

V_EXISTE VARCHAR2(100);

BEGIN
SELECT
    FIRST_NAME,
    LAST_NAME INTO V_NOMBRE,
    V_APELLIDO
FROM
    HR.EMPLOYEES
WHERE
    EMPLOYEE_ID = V_EMPLOYEE_ID;

IF V_NOMBRE IS NOT NULL
AND V_APELLIDO IS NOT NULL THEN DBMS_OUTPUT.PUT_LINE(
    'LA ID ' || V_EMPLOYEE_ID || ' CORRESPONDE A ---> ' || V_NOMBRE || ' ' || V_APELLIDO
);

END IF;

SELECT
    COUNT(DISTINCT JOB_ID) INTO V_TRABAJOS
FROM
    HR.JOB_HISTORY
WHERE
    EMPLOYEE_ID = V_EMPLOYEE_ID;

SELECT
    COUNT(DISTINCT DEPARTMENT_ID) INTO V_DEPARTAMENTOS
FROM
    HR.JOB_HISTORY
WHERE
    EMPLOYEE_ID = V_EMPLOYEE_ID;

DBMS_OUTPUT.PUT_LINE(
    'EL EMPLEADO ' || V_NOMBRE || ' ' || V_APELLIDO || ' HA CAMBIADO ' || V_TRABAJOS || ' VECES DE TRABAJO Y ' || V_DEPARTAMENTOS || ' VECES DE DEPARTAMENTO'
);

EXCEPTION
WHEN NO_DATA_FOUND THEN V_EXISTE := ' NO EXISTE EN LA BASE DE DATOS';

DBMS_OUTPUT.PUT_LINE(
    'EL EMPLEADO CON ID ' || V_EMPLOYEE_ID || V_EXISTE
);

END;
